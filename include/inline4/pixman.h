#ifndef INLINE4_PIXMAN_H
#define INLINE4_PIXMAN_H

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#include <interfaces/pixman.h>

/* Inline macros for Interface "main" */
#define pixman_transform_init_identity(matrix) IPixman->pixman_transform_init_identity((matrix))
#define pixman_transform_point_3d(transform, vector) IPixman->pixman_transform_point_3d((transform), (vector))
#define pixman_transform_point(transform, vector) IPixman->pixman_transform_point((transform), (vector))
#define pixman_transform_multiply(dst, l, r) IPixman->pixman_transform_multiply((dst), (l), (r))
#define pixman_transform_init_scale(t, sx, sy) IPixman->pixman_transform_init_scale((t), (sx), (sy))
#define pixman_transform_scale(forward, reverse, sx, sy) IPixman->pixman_transform_scale((forward), (reverse), (sx), (sy))
#define pixman_transform_init_rotate(t, cos, sin) IPixman->pixman_transform_init_rotate((t), (cos), (sin))
#define pixman_transform_rotate(forward, reverse, c, s) IPixman->pixman_transform_rotate((forward), (reverse), (c), (s))
#define pixman_transform_init_translate(t, tx, ty) IPixman->pixman_transform_init_translate((t), (tx), (ty))
#define pixman_transform_translate(forward, reverse, tx, ty) IPixman->pixman_transform_translate((forward), (reverse), (tx), (ty))
#define pixman_transform_bounds(matrix, b) IPixman->pixman_transform_bounds((matrix), (b))
#define pixman_transform_invert(dst, src) IPixman->pixman_transform_invert((dst), (src))
#define pixman_transform_is_identity(t) IPixman->pixman_transform_is_identity((t))
#define pixman_transform_is_scale(t) IPixman->pixman_transform_is_scale((t))
#define pixman_transform_is_int_translate(t) IPixman->pixman_transform_is_int_translate((t))
#define pixman_transform_is_inverse(a, b) IPixman->pixman_transform_is_inverse((a), (b))
#define pixman_transform_from_pixman_f_transform(t, ft) IPixman->pixman_transform_from_pixman_f_transform((t), (ft))
#define pixman_f_transform_from_pixman_transform(ft, t) IPixman->pixman_f_transform_from_pixman_transform((ft), (t))
#define pixman_f_transform_invert(dst, src) IPixman->pixman_f_transform_invert((dst), (src))
#define pixman_f_transform_point(t, v) IPixman->pixman_f_transform_point((t), (v))
#define pixman_f_transform_point_3d(t, v) IPixman->pixman_f_transform_point_3d((t), (v))
#define pixman_f_transform_multiply(dst, l, r) IPixman->pixman_f_transform_multiply((dst), (l), (r))
#define pixman_f_transform_init_scale(t, sx, sy) IPixman->pixman_f_transform_init_scale((t), (sx), (sy))
#define pixman_f_transform_scale(forward, reverse, sx, sy) IPixman->pixman_f_transform_scale((forward), (reverse), (sx), (sy))
#define pixman_f_transform_init_rotate(t, cos, sin) IPixman->pixman_f_transform_init_rotate((t), (cos), (sin))
#define pixman_f_transform_rotate(forward, reverse, c, s) IPixman->pixman_f_transform_rotate((forward), (reverse), (c), (s))
#define pixman_f_transform_init_translate(t, tx, ty) IPixman->pixman_f_transform_init_translate((t), (tx), (ty))
#define pixman_f_transform_translate(forward, reverse, tx, ty) IPixman->pixman_f_transform_translate((forward), (reverse), (tx), (ty))
#define pixman_f_transform_bounds(t, b) IPixman->pixman_f_transform_bounds((t), (b))
#define pixman_f_transform_init_identity(t) IPixman->pixman_f_transform_init_identity((t))
#define pixman_region_set_static_pointers(empty_box, empty_data, broken_data) IPixman->pixman_region_set_static_pointers((empty_box), (empty_data), (broken_data))
#define pixman_region_init(region) IPixman->pixman_region_init((region))
#define pixman_region_init_rect(region, x, y, width, height) IPixman->pixman_region_init_rect((region), (x), (y), (width), (height))
#define pixman_region_init_rects(region, boxes, count) IPixman->pixman_region_init_rects((region), (boxes), (count))
#define pixman_region_init_with_extents(region, extents) IPixman->pixman_region_init_with_extents((region), (extents))
#define pixman_region_init_from_image(region, image) IPixman->pixman_region_init_from_image((region), (image))
#define pixman_region_fini(region) IPixman->pixman_region_fini((region))
#define pixman_region_translate(region, x, y) IPixman->pixman_region_translate((region), (x), (y))
#define pixman_region_copy(dest, source) IPixman->pixman_region_copy((dest), (source))
#define pixman_region_intersect(new_reg, reg1, reg2) IPixman->pixman_region_intersect((new_reg), (reg1), (reg2))
#define pixman_region_union(new_reg, reg1, reg2) IPixman->pixman_region_union((new_reg), (reg1), (reg2))
#define pixman_region_union_rect(dest, source, x, y, width, height) IPixman->pixman_region_union_rect((dest), (source), (x), (y), (width), (height))
#define pixman_region_intersect_rect(dest, source, x, y, width, height) IPixman->pixman_region_intersect_rect((dest), (source), (x), (y), (width), (height))
#define pixman_region_subtract(reg_d, reg_m, reg_s) IPixman->pixman_region_subtract((reg_d), (reg_m), (reg_s))
#define pixman_region_inverse(new_reg, reg1, inv_rect) IPixman->pixman_region_inverse((new_reg), (reg1), (inv_rect))
#define pixman_region_contains_point(region, x, y, box) IPixman->pixman_region_contains_point((region), (x), (y), (box))
#define pixman_region_contains_rectangle(region, prect) IPixman->pixman_region_contains_rectangle((region), (prect))
#define pixman_region_not_empty(region) IPixman->pixman_region_not_empty((region))
#define pixman_region_extents(region) IPixman->pixman_region_extents((region))
#define pixman_region_n_rects(region) IPixman->pixman_region_n_rects((region))
#define pixman_region_rectangles(region, n_rects) IPixman->pixman_region_rectangles((region), (n_rects))
#define pixman_region_equal(region1, region2) IPixman->pixman_region_equal((region1), (region2))
#define pixman_region_selfcheck(region) IPixman->pixman_region_selfcheck((region))
#define pixman_region_reset(region, box) IPixman->pixman_region_reset((region), (box))
#define pixman_region_clear(region) IPixman->pixman_region_clear((region))
#define pixman_region32_init(region) IPixman->pixman_region32_init((region))
#define pixman_region32_init_rect(region, x, y, width, height) IPixman->pixman_region32_init_rect((region), (x), (y), (width), (height))
#define pixman_region32_init_rects(region, boxes, count) IPixman->pixman_region32_init_rects((region), (boxes), (count))
#define pixman_region32_init_with_extents(region, extents) IPixman->pixman_region32_init_with_extents((region), (extents))
#define pixman_region32_init_from_image(region, image) IPixman->pixman_region32_init_from_image((region), (image))
#define pixman_region32_fini(region) IPixman->pixman_region32_fini((region))
#define pixman_region32_translate(region, x, y) IPixman->pixman_region32_translate((region), (x), (y))
#define pixman_region32_copy(dest, source) IPixman->pixman_region32_copy((dest), (source))
#define pixman_region32_intersect(new_reg, reg1, reg2) IPixman->pixman_region32_intersect((new_reg), (reg1), (reg2))
#define pixman_region32_union(new_reg, reg1, reg2) IPixman->pixman_region32_union((new_reg), (reg1), (reg2))
#define pixman_region32_intersect_rect(dest, source, x, y, width, height) IPixman->pixman_region32_intersect_rect((dest), (source), (x), (y), (width), (height))
#define pixman_region32_union_rect(dest, source, x, y, width, height) IPixman->pixman_region32_union_rect((dest), (source), (x), (y), (width), (height))
#define pixman_region32_subtract(reg_d, reg_m, reg_s) IPixman->pixman_region32_subtract((reg_d), (reg_m), (reg_s))
#define pixman_region32_inverse(new_reg, reg1, inv_rect) IPixman->pixman_region32_inverse((new_reg), (reg1), (inv_rect))
#define pixman_region32_contains_point(region, x, y, box) IPixman->pixman_region32_contains_point((region), (x), (y), (box))
#define pixman_region32_contains_rectangle(region, prect) IPixman->pixman_region32_contains_rectangle((region), (prect))
#define pixman_region32_not_empty(region) IPixman->pixman_region32_not_empty((region))
#define pixman_region32_extents(region) IPixman->pixman_region32_extents((region))
#define pixman_region32_n_rects(region) IPixman->pixman_region32_n_rects((region))
#define pixman_region32_rectangles(region, n_rects) IPixman->pixman_region32_rectangles((region), (n_rects))
#define pixman_region32_equal(region1, region2) IPixman->pixman_region32_equal((region1), (region2))
#define pixman_region32_selfcheck(region) IPixman->pixman_region32_selfcheck((region))
#define pixman_region32_reset(region, box) IPixman->pixman_region32_reset((region), (box))
#define pixman_region32_clear(region) IPixman->pixman_region32_clear((region))
#define pixman_blt(src_bits, dst_bits, src_stride, dst_stride, src_bpp, dst_bpp, src_x, src_y, dest_x, dest_y, width, height) IPixman->pixman_blt((src_bits), (dst_bits), (src_stride), (dst_stride), (src_bpp), (dst_bpp), (src_x), (src_y), (dest_x), (dest_y), (width), (height))
#define pixman_fill(bits, stride, bpp, x, y, width, height, _xor) IPixman->pixman_fill((bits), (stride), (bpp), (x), (y), (width), (height), (_xor))
#define pixman_version() IPixman->pixman_version()
#define pixman_version_string() IPixman->pixman_version_string()
#define pixman_format_supported_destination(format) IPixman->pixman_format_supported_destination((format))
#define pixman_format_supported_source(format) IPixman->pixman_format_supported_source((format))
#define pixman_image_create_solid_fill(color) IPixman->pixman_image_create_solid_fill((color))
#define pixman_image_create_linear_gradient(p1, p2, stops, n_stops) IPixman->pixman_image_create_linear_gradient((p1), (p2), (stops), (n_stops))
#define pixman_image_create_radial_gradient(inner, outer, inner_radius, outer_radius, stops, n_stops) IPixman->pixman_image_create_radial_gradient((inner), (outer), (inner_radius), (outer_radius), (stops), (n_stops))
#define pixman_image_create_conical_gradient(center, angle, stops, n_stops) IPixman->pixman_image_create_conical_gradient((center), (angle), (stops), (n_stops))
#define pixman_image_create_bits(format, width, height, bits, rowstride_bytes) IPixman->pixman_image_create_bits((format), (width), (height), (bits), (rowstride_bytes))
#define pixman_image_create_bits_no_clear(format, width, height, bits, rowstride_bytes) IPixman->pixman_image_create_bits_no_clear((format), (width), (height), (bits), (rowstride_bytes))
#define pixman_image_ref(image) IPixman->pixman_image_ref((image))
#define pixman_image_unref(image) IPixman->pixman_image_unref((image))
#define pixman_image_set_destroy_function(image, function, data) IPixman->pixman_image_set_destroy_function((image), (function), (data))
#define pixman_image_get_destroy_data(image) IPixman->pixman_image_get_destroy_data((image))
#define pixman_image_set_clip_region(image, region) IPixman->pixman_image_set_clip_region((image), (region))
#define pixman_image_set_clip_region32(image, region) IPixman->pixman_image_set_clip_region32((image), (region))
#define pixman_image_set_has_client_clip(image, clien_clip) IPixman->pixman_image_set_has_client_clip((image), (clien_clip))
#define pixman_image_set_transform(image, transform) IPixman->pixman_image_set_transform((image), (transform))
#define pixman_image_set_repeat(image, repeat) IPixman->pixman_image_set_repeat((image), (repeat))
#define pixman_image_set_filter(image, filter, filter_params, n_filter_params) IPixman->pixman_image_set_filter((image), (filter), (filter_params), (n_filter_params))
#define pixman_image_set_source_clipping(image, source_clipping) IPixman->pixman_image_set_source_clipping((image), (source_clipping))
#define pixman_image_set_alpha_map(image, alpha_map, x, y) IPixman->pixman_image_set_alpha_map((image), (alpha_map), (x), (y))
#define pixman_image_set_component_alpha(image, component_alpha) IPixman->pixman_image_set_component_alpha((image), (component_alpha))
#define pixman_image_get_component_alpha(image) IPixman->pixman_image_get_component_alpha((image))
#define pixman_image_set_accessors(image, read_func, write_func) IPixman->pixman_image_set_accessors((image), (read_func), (write_func))
#define pixman_image_set_indexed(image, indexed) IPixman->pixman_image_set_indexed((image), (indexed))
#define pixman_image_get_data(image) IPixman->pixman_image_get_data((image))
#define pixman_image_get_width(image) IPixman->pixman_image_get_width((image))
#define pixman_image_get_height(image) IPixman->pixman_image_get_height((image))
#define pixman_image_get_stride(image) IPixman->pixman_image_get_stride((image))
#define pixman_image_get_depth(image) IPixman->pixman_image_get_depth((image))
#define pixman_image_get_format(image) IPixman->pixman_image_get_format((image))
#define pixman_filter_create_separable_convolution(n_values, scale_x, scale_y, reconstruct_x, reconstruct_y, sample_x, sample_y, subsample_bits_x, subsample_bits_y) IPixman->pixman_filter_create_separable_convolution((n_values), (scale_x), (scale_y), (reconstruct_x), (reconstruct_y), (sample_x), (sample_y), (subsample_bits_x), (subsample_bits_y))
#define pixman_image_fill_rectangles(op, image, color, n_rects, rects) IPixman->pixman_image_fill_rectangles((op), (image), (color), (n_rects), (rects))
#define pixman_image_fill_boxes(op, dest, color, n_boxes, boxes) IPixman->pixman_image_fill_boxes((op), (dest), (color), (n_boxes), (boxes))
#define pixman_compute_composite_region(region, src_image, mask_image, dest_image, src_x, src_y, mask_x, mask_y, dest_x, dest_y, width, height) IPixman->pixman_compute_composite_region((region), (src_image), (mask_image), (dest_image), (src_x), (src_y), (mask_x), (mask_y), (dest_x), (dest_y), (width), (height))
#define pixman_image_composite(op, src, mask, dest, src_x, src_y, mask_x, mask_y, dest_x, dest_y, width, height) IPixman->pixman_image_composite((op), (src), (mask), (dest), (src_x), (src_y), (mask_x), (mask_y), (dest_x), (dest_y), (width), (height))
#define pixman_image_composite32(op, src, mask, dest, src_x, src_y, mask_x, mask_y, dest_x, dest_y, width, height) IPixman->pixman_image_composite32((op), (src), (mask), (dest), (src_x), (src_y), (mask_x), (mask_y), (dest_x), (dest_y), (width), (height))
#define pixman_disable_out_of_bounds_workaround() IPixman->pixman_disable_out_of_bounds_workaround()
#define pixman_glyph_cache_create() IPixman->pixman_glyph_cache_create()
#define pixman_glyph_cache_destroy(cache) IPixman->pixman_glyph_cache_destroy((cache))
#define pixman_glyph_cache_freeze(cache) IPixman->pixman_glyph_cache_freeze((cache))
#define pixman_glyph_cache_thaw(cache) IPixman->pixman_glyph_cache_thaw((cache))
#define pixman_glyph_cache_lookup(cache, font_key, glyph_key) IPixman->pixman_glyph_cache_lookup((cache), (font_key), (glyph_key))
#define pixman_glyph_cache_insert(cache, font_key, glyph_key, origin_x, origin_y, glyph_image) IPixman->pixman_glyph_cache_insert((cache), (font_key), (glyph_key), (origin_x), (origin_y), (glyph_image))
#define pixman_glyph_cache_remove(cache, font_key, glyph_key) IPixman->pixman_glyph_cache_remove((cache), (font_key), (glyph_key))
#define pixman_glyph_get_extents(cache, n_glyphs, glyphs, extents) IPixman->pixman_glyph_get_extents((cache), (n_glyphs), (glyphs), (extents))
#define pixman_glyph_get_mask_format(cache, n_glyphs, glyphs) IPixman->pixman_glyph_get_mask_format((cache), (n_glyphs), (glyphs))
#define pixman_composite_glyphs(op, src, dest, mask_format, src_x, src_y, mask_x, mask_y, dest_x, dest_y, width, height, cache, n_glyphs, glyphs) IPixman->pixman_composite_glyphs((op), (src), (dest), (mask_format), (src_x), (src_y), (mask_x), (mask_y), (dest_x), (dest_y), (width), (height), (cache), (n_glyphs), (glyphs))
#define pixman_composite_glyphs_no_mask(op, src, dest, src_x, src_y, dest_x, dest_y, cache, n_glyphs, glyphs) IPixman->pixman_composite_glyphs_no_mask((op), (src), (dest), (src_x), (src_y), (dest_x), (dest_y), (cache), (n_glyphs), (glyphs))
#define pixman_sample_ceil_y(y, bpp) IPixman->pixman_sample_ceil_y((y), (bpp))
#define pixman_sample_floor_y(y, bpp) IPixman->pixman_sample_floor_y((y), (bpp))
#define pixman_edge_step(e, n) IPixman->pixman_edge_step((e), (n))
#define pixman_edge_init(e, bpp, y_start, x_top, y_top, x_bot, y_bot) IPixman->pixman_edge_init((e), (bpp), (y_start), (x_top), (y_top), (x_bot), (y_bot))
#define pixman_line_fixed_edge_init(e, bpp, y, line, x_off, y_off) IPixman->pixman_line_fixed_edge_init((e), (bpp), (y), (line), (x_off), (y_off))
#define pixman_rasterize_edges(image, l, r, t, b) IPixman->pixman_rasterize_edges((image), (l), (r), (t), (b))
#define pixman_add_traps(image, x_off, y_off, ntrap, traps) IPixman->pixman_add_traps((image), (x_off), (y_off), (ntrap), (traps))
#define pixman_add_trapezoids(image, x_off, y_off, ntraps, traps) IPixman->pixman_add_trapezoids((image), (x_off), (y_off), (ntraps), (traps))
#define pixman_rasterize_trapezoid(image, trap, x_off, y_off) IPixman->pixman_rasterize_trapezoid((image), (trap), (x_off), (y_off))
#define pixman_composite_trapezoids(op, src, dst, mask_format, x_src, y_src, x_dst, y_dst, n_traps, traps) IPixman->pixman_composite_trapezoids((op), (src), (dst), (mask_format), (x_src), (y_src), (x_dst), (y_dst), (n_traps), (traps))
#define pixman_composite_triangles(op, src, dst, mask_format, x_src, y_src, x_dst, y_dst, n_tris, tris) IPixman->pixman_composite_triangles((op), (src), (dst), (mask_format), (x_src), (y_src), (x_dst), (y_dst), (n_tris), (tris))
#define pixman_add_triangles(image, x_off, y_off, n_tris, tris) IPixman->pixman_add_triangles((image), (x_off), (y_off), (n_tris), (tris))

#endif /* INLINE4_PIXMAN_H */

